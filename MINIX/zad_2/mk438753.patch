diff -rupNEZbB OriginalSources/usr/.vscode/settings.json Sources/usr/.vscode/settings.json
--- OriginalSources/usr/.vscode/settings.json	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/.vscode/settings.json	2023-06-03 19:26:36.187652390 +0200
@@ -0,0 +1,34 @@
+{
+    "files.associations": {
+        "typeindex": "c",
+        "typeinfo": "c",
+        "types.h": "c",
+        "__mutex_base": "c",
+        "shared_mutex": "c",
+        "system_error": "c",
+        "mutex": "c",
+        "time.h": "c",
+        "__functional_03": "c",
+        "__functional_base": "c",
+        "__functional_base_03": "c",
+        "__tuple": "c",
+        "array": "c",
+        "chrono": "c",
+        "functional": "c",
+        "limits": "c",
+        "memory": "c",
+        "random": "c",
+        "ratio": "c",
+        "tuple": "c",
+        "type_traits": "c",
+        "utility": "c",
+        "compare": "c",
+        "istream": "c",
+        "ostream": "c",
+        "ranges": "c",
+        "bitmap.h": "c",
+        "*.tcc": "c",
+        "streambuf": "c",
+        "*.def": "c"
+    }
+}
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/include/minix/ipc.h Sources/usr/include/minix/ipc.h
--- OriginalSources/usr/include/minix/ipc.h	2023-05-12 23:34:23.965965042 +0200
+++ Sources/usr/include/minix/ipc.h	2023-06-01 20:59:37.885322156 +0200
@@ -5,6 +5,7 @@
 #include <minix/type.h>
 #include <minix/const.h>
 #include <sys/signal.h>
+#include <stdbool.h>
 #include <sys/types.h>
 
 /*==========================================================================* 
diff -rupNEZbB OriginalSources/usr/include/minix/syslib.h Sources/usr/include/minix/syslib.h
--- OriginalSources/usr/include/minix/syslib.h	2023-05-12 23:34:23.255965068 +0200
+++ Sources/usr/include/minix/syslib.h	2023-06-04 00:42:49.105924677 +0200
@@ -14,6 +14,8 @@
 #include <minix/sef.h>
 #include <machine/mcontext.h>
 
+#include <stdbool.h>
+
 /* Forward declaration */
 struct reg86u;
 struct rs_pci;
@@ -39,8 +41,8 @@ int sys_trace(int req, endpoint_t proc_e
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
 	cpu);
-int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
-	quantum, int cpu);
+int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
+	int cpu, int64_t deadline, int64_t estimate, bool kill, int prev_priority);
 
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
diff -rupNEZbB OriginalSources/usr/include/unistd.h Sources/usr/include/unistd.h
--- OriginalSources/usr/include/unistd.h	2023-05-12 23:34:16.485965324 +0200
+++ Sources/usr/include/unistd.h	2023-06-01 20:58:19.225322521 +0200
@@ -67,6 +67,7 @@
 #include <machine/int_types.h>
 #include <sys/cdefs.h>
 #include <sys/featuretest.h>
+#include <stdbool.h>
 #include <sys/types.h>
 #include <sys/unistd.h>
 
diff -rupNEZbB OriginalSources/usr/src/include/unistd.h Sources/usr/src/include/unistd.h
--- OriginalSources/usr/src/include/unistd.h	2023-05-12 23:36:33.835951092 +0200
+++ Sources/usr/src/include/unistd.h	2023-06-03 05:06:18.451540618 +0200
@@ -70,6 +70,8 @@
 #include <sys/types.h>
 #include <sys/unistd.h>
 
+#include <stdbool.h>
+
 #if _FORTIFY_SOURCE > 0
 #include <ssp/unistd.h>
 #endif
@@ -144,6 +146,8 @@ __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
 
+/* zad 4 sched_deadline*/
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill);
 
 /*
  * IEEE Std 1003.2-92, adopted in X/Open Portability Guide Issue 4 and later
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/Makefile.inc Sources/usr/src/lib/libc/misc/Makefile.inc
--- OriginalSources/usr/src/lib/libc/misc/Makefile.inc	2023-05-12 23:36:39.505950647 +0200
+++ Sources/usr/src/lib/libc/misc/Makefile.inc	2023-06-01 19:27:43.687706883 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c sched_deadline.c
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/sched_deadline.c Sources/usr/src/lib/libc/misc/sched_deadline.c
--- OriginalSources/usr/src/lib/libc/misc/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/lib/libc/misc/sched_deadline.c	2023-06-03 23:40:45.495728282 +0200
@@ -0,0 +1,38 @@
+
+#include <lib.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <stdbool.h>
+#include <time.h>
+#include <minix/rs.h>
+
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill){
+    message mess;
+ 	memset(&mess, 0, sizeof(mess));
+
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+
+    unsigned long long millisecondsSinceEpoch =
+        (unsigned long long)(tv.tv_sec) * 1000 +
+        (unsigned long long)(tv.tv_usec) / 1000; 
+
+    if((deadline < millisecondsSinceEpoch + estimate && deadline != -1) || estimate < 0){
+        errno = EINVAL;
+		return -1;
+    }
+
+    mess.m_deadline.deadline = deadline;
+    mess.m_deadline.estimate = estimate;
+    mess.m_deadline.kill = kill;
+
+    int ret = _syscall(PM_PROC_NR, PM_DEADLINE, &mess);
+    if(ret < 0){
+		return ret;
+	}
+
+    return 0;
+}
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/callnr.h Sources/usr/src/minix/include/minix/callnr.h
--- OriginalSources/usr/src/minix/include/minix/callnr.h	2023-05-12 23:34:35.625964654 +0200
+++ Sources/usr/src/minix/include/minix/callnr.h	2023-06-03 04:20:28.118465758 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_DEADLINE		(PM_BASE + 48) 
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/com.h Sources/usr/src/minix/include/minix/com.h
--- OriginalSources/usr/src/minix/include/minix/com.h	2023-05-12 23:34:34.785964681 +0200
+++ Sources/usr/src/minix/include/minix/com.h	2023-06-03 06:05:19.541808438 +0200
@@ -440,6 +440,8 @@
 					 * marked scheduler 
 					 */
 
+#define SCHEDCTL_FLAG_DEADLINE 2					
+
 /* Field names for SYS_PADCONF */
 #define PADCONF_PADCONF		m2_i1	/* pad to configure */
 #define PADCONF_MASK		m2_i2	/* mask to apply */
@@ -763,6 +765,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_DEADLINE (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/config.h Sources/usr/src/minix/include/minix/config.h
--- OriginalSources/usr/src/minix/include/minix/config.h	2023-05-12 23:34:34.855964679 +0200
+++ Sources/usr/src/minix/include/minix/config.h	2023-06-01 20:34:13.545770942 +0200
@@ -95,4 +95,8 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+/* sched_deadline constants*/
+#define DEADLINE_Q 8
+#define PENALTY_Q  14
+
 #endif /* _CONFIG_H */
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/ipc.h Sources/usr/src/minix/include/minix/ipc.h
--- OriginalSources/usr/src/minix/include/minix/ipc.h	2023-05-12 23:34:34.485964690 +0200
+++ Sources/usr/src/minix/include/minix/ipc.h	2023-06-04 00:49:08.694940293 +0200
@@ -6,6 +6,7 @@
 #include <minix/const.h>
 #include <sys/signal.h>
 #include <sys/types.h>
+#include <stdbool.h>
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
@@ -97,6 +98,16 @@ union	ds_val {
 };
 
 typedef struct {
+	endpoint_t endpoint;
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+
+	uint8_t padding[35]
+} mess_deadline;
+_ASSERT_MSG_SIZE(mess_deadline);
+
+typedef struct {
 	union	ds_val 	val_out;
 	int	val_len;
 	uint8_t padding[48];
@@ -978,8 +989,12 @@ typedef struct {
 	int priority;
 	int quantum;
 	int cpu;
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+	int prev_priority;
 
-	uint8_t padding[36];
+	uint8_t padding[12];
 } mess_lsys_krn_schedctl;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedctl);
 
@@ -2040,6 +2055,7 @@ typedef struct {
 		mess_9			m_m9;
 		mess_10			m_m10;
 
+		mess_deadline	m_deadline;
 		mess_ds_reply		m_ds_reply;
 		mess_ds_req		m_ds_req;
 		mess_fs_vfs_breadwrite	m_fs_vfs_breadwrite;
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/syslib.h Sources/usr/src/minix/include/minix/syslib.h
--- OriginalSources/usr/src/minix/include/minix/syslib.h	2023-05-12 23:34:35.265964666 +0200
+++ Sources/usr/src/minix/include/minix/syslib.h	2023-06-04 00:43:01.650919788 +0200
@@ -39,8 +39,8 @@ int sys_trace(int req, endpoint_t proc_e
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
 	cpu);
-int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
-	quantum, int cpu);
+int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
+	int cpu, int64_t deadline, int64_t estimate, bool kill, int prev_priority);
 
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/extracted-mtype.h Sources/usr/src/minix/kernel/extracted-mtype.h
--- OriginalSources/usr/src/minix/kernel/extracted-mtype.h	2023-05-12 23:36:26.535957159 +0200
+++ Sources/usr/src/minix/kernel/extracted-mtype.h	2023-06-01 22:27:33.613702280 +0200
@@ -140,6 +140,7 @@ IDENT(RTCDEV_REPLY)
 IDENT(RTCDEV_SET_TIME)
 IDENT(RTCDEV_SET_TIME_G)
 IDENT(SCHEDULING_INHERIT)
+IDENT(SCHEDULING_DEADLINE)
 IDENT(SCHEDULING_NO_QUANTUM)
 IDENT(SCHEDULING_SET_NICE)
 IDENT(SCHEDULING_START)
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.c Sources/usr/src/minix/kernel/proc.c
--- OriginalSources/usr/src/minix/kernel/proc.c	2023-05-12 23:36:26.255957174 +0200
+++ Sources/usr/src/minix/kernel/proc.c	2023-06-04 01:34:16.268868955 +0200
@@ -133,7 +133,11 @@ void proc_init(void)
 		rp->p_endpoint = _ENDPOINT(0, rp->p_nr); /* generation no. 0 */
 		rp->p_scheduler = NULL;		/* no user space scheduler */
 		rp->p_priority = 0;		/* no priority */
+		rp->prev_priority = 0;
 		rp->p_quantum_size_ms = 0;	/* no quantum size */
+		rp->deadline = -1;
+		rp->estimate = 0;
+		rp->kill = 0;
 
 		/* arch-specific initialization */
 		arch_proc_reset(rp);
@@ -1520,6 +1524,11 @@ asyn_error:
   return(OK);
 }
 
+uint64_t get_time(void) {
+    uint64_t realtime = get_realtime();
+    return realtime * 1000 / system_hz + boottime * 1000;
+}
+
 /*===========================================================================*
  *				enqueue					     * 
  *===========================================================================*/
@@ -1543,14 +1552,116 @@ void enqueue(
   assert(q >= 0);
 
   rdy_head = get_cpu_var(rp->p_cpu, run_q_head);
-  rdy_tail = get_cpu_var(rp->p_cpu, run_q_tail);
+  rdy_tail = get_cpu_var(rp->p_c	pu, run_q_tail);
 
   /* Now add the process to the queue. */
   if (!rdy_head[q]) {		/* add to empty queue */
       rdy_head[q] = rdy_tail[q] = rp; 		/* create a new queue */
       rp->p_nextready = NULL;		/* mark new end */
+  } else if(q == DEADLINE_Q){ 
+		// printf("%lld \n", rp->deadline);
+		int64_t current_time = get_time();
+		int64_t rp_used_time = (rp->p_user_time * 1000 / system_hz);	
+
+		if(rp->estimate < rp_used_time && !rp->kill){
+			rp->p_priority = PENALTY_Q;
+			rp->prev_priority = rp->p_priority;
+			rp->deadline = -2;
+			rp->estimate = 0;
+			q = rp->p_priority;
+			// printf("1: ");
+			// printf("%d \n", q);
+			if (!rdy_head[q]) {		/* add to empty queue */
+				rdy_head[q] = rdy_tail[q] = rp; 		/* create a new queue */
+				rp->p_nextready = NULL;
+			} else {
+				rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
+				rdy_tail[q] = rp;				/* set new queue tail */
+				rp->p_nextready = NULL;	
+			}
+		} else if(rp->deadline < current_time){
+			rp->deadline = -1;
+			rp->estimate = 0;
+			rp->p_priority = rp->prev_priority;
+			rp->prev_priority = rp->p_priority;
+			q = rp->p_priority;
+			// printf("2: ");
+			// printf("%d \n", q);
+			if (!rdy_head[q]) {		/* add to empty queue */
+				rdy_head[q] = rdy_tail[q] = rp; 		/* create a new queue */
+				rp->p_nextready = NULL;
+			} else {
+				rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
+				rdy_tail[q] = rp;				/* set new queue tail */
+				rp->p_nextready = NULL;	
   } 
-  else {					/* add to tail of queue */
+		} else {
+			int64_t num_proc = 0;
+			for (struct proc *it = rdy_head[q]; it != NULL; it = it->p_nextready) {
+				num_proc++;
+			}
+
+ 			int64_t i = 0;
+			struct proc *procs[num_proc];
+			int64_t time_sum[num_proc];
+						
+			for (struct proc *it = rdy_head[q]; it != NULL; it = it->p_nextready) {
+				procs[i] = it;
+				time_sum[i] = 0;
+				i++;
+			}
+			i = 0;
+			for (struct proc *it = rdy_head[q]; it != NULL; it = it->p_nextready) {
+				time_sum[i] += (procs[i]->estimate - procs[i]->time_spent);
+				i++;
+			}
+			if(rp->estimate - rp_used_time + time_sum[num_proc - 1] + current_time <= rp->deadline){
+					rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
+					rdy_tail[q] = rp;				/* set new queue tail */
+					rp->p_nextready = NULL;
+			} else {
+				int done = 0;
+				for(i = num_proc-1; i > 0; i--){
+					if(time_sum[i] <= procs[i]->deadline){
+						if(time_sum[i] + rp->estimate - rp_used_time > procs[i]->deadline){
+							break;
+						}
+					}
+					if(rp->estimate - rp_used_time + time_sum[i-1] + current_time <= rp->deadline){
+						if(i == 1){
+							rdy_head[q] = rp;				/* set new queue tail */
+							rp->p_nextready = procs[i-1];		/* chain tail of queue */	
+						} else {
+							procs[i-1]->p_nextready = rp;
+							rp->p_nextready = procs[i];
+						}
+						done = 1;
+						break;
+					} 
+				}
+				if(done == 0){
+					for(i = num_proc-1; i > 1; i--){
+						if(time_sum[i] <= procs[i]->deadline){
+							if(time_sum[i] + rp->estimate - rp_used_time > procs[i]->deadline){
+								break;
+							}
+						}
+						if(procs[i-1]->estimate <= rp->estimate && rp->estimate <= procs[i]->estimate){
+							procs[i-1]->p_nextready = rp;
+							rp->p_nextready = procs[i];
+							done = 1;
+							break;
+						}
+					}
+					if(done == 0){
+						rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
+						rdy_tail[q] = rp;				/* set new queue tail */
+						rp->p_nextready = NULL;		/* mark new end */
+					}
+				}
+			}
+		}
+  } else {					/* add to tail of queue */
       rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
@@ -1729,10 +1840,17 @@ static struct proc * pick_proc(void)
    */
   rdy_head = get_cpulocal_var(run_q_head);
   for (q=0; q < NR_SCHED_QUEUES; q++) {	
+
 	if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
 	}
+
+	// if(rp->deadline != -1){
+	// 	// algoos
+	// 	// clock_t curren_time = get_realtime();
+	// }
+
 	assert(proc_is_runnable(rp));
 	if (priv(rp)->s_flags & BILLABLE)	 	
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.h Sources/usr/src/minix/kernel/proc.h
--- OriginalSources/usr/src/minix/kernel/proc.h	2023-05-12 23:36:26.585957157 +0200
+++ Sources/usr/src/minix/kernel/proc.h	2023-06-03 21:59:51.885656363 +0200
@@ -15,6 +15,7 @@
  * struct proc, be sure to change sconst.h to match.
  */
 #include <minix/com.h>
+#include <stdbool.h>
 #include <minix/portio.h>
 #include "const.h"
 #include "priv.h"
@@ -128,9 +129,18 @@ struct proc {
 
   u64_t p_signal_received;
 
+
+
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+
+  int64_t deadline;
+  int64_t estimate;
+  int64_t time_spent;
+  bool kill;
+  char prev_priority;
+
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/procoffsets.h Sources/usr/src/minix/kernel/procoffsets.h
--- OriginalSources/usr/src/minix/kernel/procoffsets.h	2023-05-12 23:36:26.365957168 +0200
+++ Sources/usr/src/minix/kernel/procoffsets.h	2023-06-03 12:48:04.354695766 +0200
@@ -1,4 +1,4 @@
-#define proc_SIZEOF 528
+#define proc_SIZEOF 554
 #define DIREG 8
 #define SIREG 12
 #define BPREG 16
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_fork.c Sources/usr/src/minix/kernel/system/do_fork.c
--- OriginalSources/usr/src/minix/kernel/system/do_fork.c	2023-05-12 23:36:27.475956901 +0200
+++ Sources/usr/src/minix/kernel/system/do_fork.c	2023-06-03 22:00:16.098146871 +0200
@@ -75,6 +75,14 @@ int do_fork(struct proc * caller, messag
   rpc->p_user_time = 0;		/* set all the accounting times to 0 */
   rpc->p_sys_time = 0;
 
+  if(rpp->p_priority == DEADLINE_Q){
+    rpc->deadline = rpp->deadline;
+    rpc->estimate = rpp->estimate;
+    rpc->kill = rpp->kill;
+    rpc->prev_priority = rpp->prev_priority;
+    rpc->p_user_time = rpp->p_user_time;
+  }
+
   rpc->p_misc_flags &=
 	~(MF_VIRT_TIMER | MF_PROF_TIMER | MF_SC_TRACE | MF_SPROF_SEEN | MF_STEP);
   rpc->p_virt_left = 0;		/* disable, clear the process-virtual timers */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_schedctl.c Sources/usr/src/minix/kernel/system/do_schedctl.c
--- OriginalSources/usr/src/minix/kernel/system/do_schedctl.c	2023-05-12 23:36:28.285955739 +0200
+++ Sources/usr/src/minix/kernel/system/do_schedctl.c	2023-06-04 00:44:23.106721167 +0200
@@ -1,4 +1,5 @@
 #include "kernel/system.h"
+#include <stdbool.h>
 #include <minix/endpoint.h>
 
 /*===========================================================================*
@@ -14,7 +15,7 @@ int do_schedctl(struct proc * caller, me
 
 	/* check parameter validity */
 	flags = m_ptr->m_lsys_krn_schedctl.flags;
-	if (flags & ~SCHEDCTL_FLAG_KERNEL) {
+	if (flags > SCHEDCTL_FLAG_DEADLINE) {
 		printf("do_schedctl: flags 0x%x invalid, caller=%d\n", 
 			flags, caller - proc);
 		return EINVAL;
@@ -37,6 +38,36 @@ int do_schedctl(struct proc * caller, me
 		if((r = sched_proc(p, priority, quantum, cpu) != OK))
 			return r;
 		p->p_scheduler = NULL;
+	} else if((flags & SCHEDCTL_FLAG_DEADLINE) == SCHEDCTL_FLAG_DEADLINE) {
+		if (caller != p->p_scheduler) {
+            return EPERM;
+        }
+
+		int64_t deadline = m_ptr->m_lsys_krn_schedctl.deadline;
+		int64_t estimate = m_ptr->m_lsys_krn_schedctl.estimate;
+		bool	kill = m_ptr->m_lsys_krn_schedctl.kill;
+
+		if ((deadline != -1) == (p->deadline != -1)) {
+			return EPERM;
+		}
+
+		if((deadline == -1) == (p->deadline == -1)) { 
+			return EPERM;
+		}
+
+		priority = m_ptr->m_lsys_krn_schedctl.priority;
+		quantum = m_ptr->m_lsys_krn_schedctl.quantum;
+		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
+
+		p->deadline = deadline;
+		p->estimate = estimate;
+		p->kill = kill;
+		p->prev_priority = m_ptr->m_lsys_krn_schedctl.prev_priority;
+		int64_t old_deadline = deadline;
+
+		if((r = sched_proc(p, priority, quantum, cpu) != OK))
+			deadline = old_deadline;
+			return r;
 	} else {
 		/* the caller becomes the scheduler */
 		p->p_scheduler = caller;
diff -rupNEZbB OriginalSources/usr/src/minix/lib/libsys/sched_start.c Sources/usr/src/minix/lib/libsys/sched_start.c
--- OriginalSources/usr/src/minix/lib/libsys/sched_start.c	2023-05-12 23:35:12.175962552 +0200
+++ Sources/usr/src/minix/lib/libsys/sched_start.c	2023-06-04 00:43:23.046744723 +0200
@@ -73,7 +73,7 @@ int sched_start(endpoint_t scheduler_e,
 	/* The KERNEL must schedule this process. */
 	if(scheduler_e == KERNEL) {
 		if ((rv = sys_schedctl(SCHEDCTL_FLAG_KERNEL, 
-			schedulee_e, maxprio, quantum, cpu)) != OK) {
+			schedulee_e, maxprio, quantum, cpu, -1 , 0, 0, maxprio)) != OK) {
 			return rv;
 		}
 		*newscheduler_e = scheduler_e;
diff -rupNEZbB OriginalSources/usr/src/minix/lib/libsys/sys_schedctl.c Sources/usr/src/minix/lib/libsys/sys_schedctl.c
--- OriginalSources/usr/src/minix/lib/libsys/sys_schedctl.c	2023-05-12 23:35:09.175962690 +0200
+++ Sources/usr/src/minix/lib/libsys/sys_schedctl.c	2023-06-04 00:42:14.861771439 +0200
@@ -1,7 +1,8 @@
 #include "syslib.h"
+#include <stdbool.h>
 
 int sys_schedctl(uint32_t flags, endpoint_t proc_ep, int priority, int quantum,
-	int cpu)
+	int cpu, int64_t deadline, int64_t estimate, bool kill, int prev_priority)
 {
 	message m;
 
@@ -10,6 +11,10 @@ int sys_schedctl(uint32_t flags, endpoin
 	m.m_lsys_krn_schedctl.priority = priority;
 	m.m_lsys_krn_schedctl.quantum = quantum;
 	m.m_lsys_krn_schedctl.cpu = cpu;
+	m.m_lsys_krn_schedctl.deadline = deadline;
+	m.m_lsys_krn_schedctl.estimate = estimate;
+	m.m_lsys_krn_schedctl.kill = kill;
+	m.m_lsys_krn_schedctl.prev_priority = prev_priority;
 
 	return(_kernel_call(SYS_SCHEDCTL, &m));
 }
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/Makefile Sources/usr/src/minix/servers/pm/Makefile
--- OriginalSources/usr/src/minix/servers/pm/Makefile	2023-05-12 23:34:27.715964906 +0200
+++ Sources/usr/src/minix/servers/pm/Makefile	2023-06-01 18:09:57.357764600 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c sched_deadline.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/proto.h Sources/usr/src/minix/servers/pm/proto.h
--- OriginalSources/usr/src/minix/servers/pm/proto.h	2023-05-12 23:34:27.695964908 +0200
+++ Sources/usr/src/minix/servers/pm/proto.h	2023-06-01 18:49:37.387039899 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/*  sched_deadline */
+int do_sched_deadline(void);
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/sched_deadline.c Sources/usr/src/minix/servers/pm/sched_deadline.c
--- OriginalSources/usr/src/minix/servers/pm/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/minix/servers/pm/sched_deadline.c	2023-06-03 22:13:21.655331310 +0200
@@ -0,0 +1,21 @@
+#include "pm.h"
+#include <stdbool.h>
+#include "mproc.h"
+
+int do_sched_deadline(void){
+    message mess;
+
+    mess.m_deadline.endpoint = mp->mp_endpoint;
+    mess.m_deadline.deadline = m_in.m_deadline.deadline;
+	mess.m_deadline.estimate = m_in.m_deadline.estimate;
+	mess.m_deadline.kill = m_in.m_deadline.kill;
+
+    // printf("%ld \n", m_in.m_deadline.deadline);
+
+    int res = _taskcall(mp->mp_scheduler, SCHEDULING_DEADLINE, &mess);
+    if(res < 0){
+		return res;
+	}
+
+    return OK;
+}
\ No newline at end of file
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/table.c Sources/usr/src/minix/servers/pm/table.c
--- OriginalSources/usr/src/minix/servers/pm/table.c	2023-05-12 23:34:27.735964906 +0200
+++ Sources/usr/src/minix/servers/pm/table.c	2023-06-01 16:28:33.379621325 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_DEADLINE) = do_sched_deadline	/* sched_deadline */
 };
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/main.c Sources/usr/src/minix/servers/sched/main.c
--- OriginalSources/usr/src/minix/servers/sched/main.c	2023-05-12 23:34:28.665964875 +0200
+++ Sources/usr/src/minix/servers/sched/main.c	2023-06-01 22:51:13.453265600 +0200
@@ -87,6 +87,9 @@ int main(void)
 				result = EPERM;
 			}
 			break;
+		case SCHEDULING_DEADLINE: /* sched_deadline */
+			result = do_sched_deadline(&m_in);
+			break;
 		default:
 			result = no_sys(who_e, call_nr);
 		}
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/proto.h Sources/usr/src/minix/servers/sched/proto.h
--- OriginalSources/usr/src/minix/servers/sched/proto.h	2023-05-12 23:34:28.725964875 +0200
+++ Sources/usr/src/minix/servers/sched/proto.h	2023-06-01 22:54:07.113214950 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_sched_deadline(message *m_ptr);
 void init_scheduling(void);
 
 /* utility.c */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedproc.h Sources/usr/src/minix/servers/sched/schedproc.h
--- OriginalSources/usr/src/minix/servers/sched/schedproc.h	2023-05-12 23:34:28.595964878 +0200
+++ Sources/usr/src/minix/servers/sched/schedproc.h	2023-06-03 19:50:50.832904791 +0200
@@ -2,7 +2,7 @@
  * for each process.
  */
 #include <limits.h>
-
+#include <stdbool.h>
 #include <minix/bitmap.h>
 
 /* EXTERN should be extern except in main.c, where we want to keep the struct */
@@ -30,6 +30,12 @@ EXTERN struct schedproc {
 	unsigned priority;		/* the process' current priority */
 	unsigned time_slice;		/* this process's time slice */
 	unsigned cpu;		/* what CPU is the process running on */
+	char prev_priority;
+	int64_t deadline;
+	int64_t estimate;
+	int64_t time_spent;
+	bool kill;
+
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedule.c Sources/usr/src/minix/servers/sched/schedule.c
--- OriginalSources/usr/src/minix/servers/sched/schedule.c	2023-05-12 23:34:28.635964877 +0200
+++ Sources/usr/src/minix/servers/sched/schedule.c	2023-06-04 00:44:00.324230109 +0200
@@ -11,6 +11,7 @@
 #include "schedproc.h"
 #include <assert.h>
 #include <minix/com.h>
+#include <stdbool.h>
 #include <machine/archtypes.h>
 #include "kernel/proc.h" /* for queue constants */
 
@@ -21,6 +22,7 @@ static unsigned balance_timeout;
 
 static int schedule_process(struct schedproc * rmp, unsigned flags);
 static void balance_queues(minix_timer_t *tp);
+static inline unsigned normalize_priority(unsigned priority);
 
 #define SCHEDULE_CHANGE_PRIO	0x1
 #define SCHEDULE_CHANGE_QUANTUM	0x2
@@ -92,6 +95,13 @@ int do_noquantum(message *m_ptr)
 	register struct schedproc *rmp;
 	int rv, proc_nr_n;
 
+	struct timeval tv;
+	gettimeofday(&tv, NULL);
+
+	unsigned long long current_time = 
+	(unsigned long long)(tv.tv_sec) * 1000 +
+	(unsigned long long)(tv.tv_usec) / 1000;
+
 	if (sched_isokendpt(m_ptr->m_source, &proc_nr_n) != OK) {
 		printf("SCHED: WARNING: got an invalid endpoint in OOQ msg %u.\n",
 		m_ptr->m_source);
@@ -99,8 +109,23 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
+
+	if(rmp->priority == DEADLINE_Q){
+		rmp->time_spent += rmp->time_slice;
+		if(rmp->time_spent >= rmp->estimate){
+			if(rmp->kill){
+				sys_kill(rmp->endpoint, SIGKILL);
+				return OK;
+			}
+		} 
+		else if(rmp->deadline != -1 && rmp->deadline < current_time){
+			rmp->priority = rmp->prev_priority;
+		}
+	} else if(rmp->priority != DEADLINE_Q && rmp->priority < MIN_USER_Q) {
+		rmp->priority += 1;
+		if(rmp->priority == DEADLINE_Q){
+			rmp->priority += 1;
+		}
 	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
@@ -164,6 +189,8 @@ int do_start_scheduling(message *m_ptr)
 	rmp->endpoint     = m_ptr->m_lsys_sched_scheduling_start.endpoint;
 	rmp->parent       = m_ptr->m_lsys_sched_scheduling_start.parent;
 	rmp->max_priority = m_ptr->m_lsys_sched_scheduling_start.maxprio;
+	rmp->max_priority = normalize_priority(rmp->max_priority);
+
 	if (rmp->max_priority >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -175,6 +202,7 @@ int do_start_scheduling(message *m_ptr)
 		/* We have a special case here for init, which is the first
 		   process scheduled, and the parent of itself. */
 		rmp->priority   = USER_Q;
+		rmp->priority	= normalize_priority(USER_Q);
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
 
 		/*
@@ -207,7 +235,8 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
-		rmp->priority = schedproc[parent_nr_n].priority;
+		// rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->priority = normalize_priority(schedproc[parent_nr_n].priority);
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
 		
@@ -218,7 +247,7 @@ int do_start_scheduling(message *m_ptr)
 
 	/* Take over scheduling the process. The kernel reply message populates
 	 * the processes current priority and its time slice */
-	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0)) != OK) {
+	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0, -1, 0, 0, 0)) != OK) {
 		printf("Sched: Error taking over scheduling for %d, kernel said %d\n",
 			rmp->endpoint, rv);
 		return rv;
@@ -273,6 +302,8 @@ int do_nice(message *m_ptr)
 
 	rmp = &schedproc[proc_nr_n];
 	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	new_q = normalize_priority(new_q);
+
 	if (new_q >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -282,7 +313,9 @@ int do_nice(message *m_ptr)
 	old_max_q = rmp->max_priority;
 
 	/* Update the proc entry and reschedule the process */
+	if(rmp->priority != DEADLINE_Q){
 	rmp->max_priority = rmp->priority = new_q;
+	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		/* Something went wrong when rescheduling the process, roll
@@ -295,6 +328,73 @@ int do_nice(message *m_ptr)
 }
 
 /*===========================================================================*
+ *				do_sched_deadline					     *
+ *===========================================================================*/
+int do_sched_deadline(message *m_ptr)
+{
+	// printf("XDDDDDDDDDDDDD1");
+	struct schedproc *rmp;
+	int rv;
+	int proc_nr_n;
+	unsigned new_q, old_q, old_max_q;
+
+	int64_t deadline = m_ptr->m_deadline.deadline;
+	int64_t estimate = m_ptr->m_deadline.estimate;
+	bool kill = m_ptr->m_deadline.kill;
+
+	/* check who can send you requests */
+	if (!accept_message(m_ptr))
+		return EPERM;
+
+	if (sched_isokendpt(m_ptr->m_deadline.endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+		return EBADEPT;
+	}
+
+	rmp = &schedproc[proc_nr_n];
+
+	// new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	new_q = DEADLINE_Q;
+
+	if (new_q >= NR_SCHED_QUEUES) {
+		return EINVAL;
+	}
+
+	// if(new_q == rmp->priority) { 
+	// 	return EPERM;
+	// }
+
+	/* Store old values, in case we need to roll back the changes */
+	old_q     = rmp->priority;
+	old_max_q = rmp->max_priority;
+
+	/* Update the proc entry and reschedule the process */
+	if(deadline == -1){
+		rmp->priority     = old_q;
+		rmp->max_priority = old_max_q;
+		rmp->prev_priority = rmp->priority;
+	} else {
+		rmp->max_priority = rmp->priority = new_q;
+		rmp->prev_priority = old_q;
+		rmp->estimate = estimate;
+		rmp->time_spent = 0;
+		rmp->kill = kill;
+		rmp->deadline = deadline;
+	}
+
+	if ((rv = sys_schedctl(SCHEDCTL_FLAG_DEADLINE, rmp->endpoint,
+                           rmp->priority, rmp->time_slice, -1, deadline, estimate, kill, rmp->prev_priority)) != OK) {
+        /* Something went wrong when rescheduling the process, roll
+         * back the changes to proc struct. */
+       	rmp->priority     = old_q;
+		rmp->max_priority = old_max_q;
+    }
+	// printf("XDDDDDDDDDDDDD2");
+	return rv;
+}
+
+/*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
@@ -355,9 +456,13 @@ static void balance_queues(minix_timer_t
 	int proc_nr;
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
+		if (rmp->flags & IN_USE && rmp->priority != DEADLINE_Q) {
 			if (rmp->priority > rmp->max_priority) {
 				rmp->priority -= 1; /* increase priority */
+				// normalize_priority(rmp->priority);
+				if(rmp->priority == DEADLINE_Q){
+					rmp->priority--;
+				}
 				schedule_process_local(rmp);
 			}
 		}
@@ -365,3 +470,19 @@ static void balance_queues(minix_timer_t
 
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
+/*===========================================================================*
+ *				normalize_priority			     *
+ *===========================================================================*/
+
+static inline unsigned normalize_priority(unsigned priority) {
+    if (priority == DEADLINE_Q) {
+        if (priority < MIN_USER_Q) {
+            return priority + 1;
+        } else {
+            return priority - 1;
+        }
+    }
+
+    return priority;
+}
